{"version":3,"sources":["Components/Map.jsx","Components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["am4core","am4themes_animated","Map","chart","am4maps","geodata","am4geodata_worldLow","projection","Miller","worldSeries","series","push","exclude","useGeodata","polygonTemplate","mapPolygons","template","tooltipText","fill","colors","getIndex","nonScalingStroke","states","create","properties","usaSeries","am4geodata_usaLow","usPolygonTemplate","this","dispose","react_default","a","createElement","id","style","width","height","Component","Footer","state","Autocomplete","title","onChange","changedItem","console","log","items","_ref","key","getInputProps","getRef","getButtonProps","inputValue","openMenu","toggleMenu","Pane","innerRef","display","TextInput","Object","assign","flex","placeholder","value","onFocus","particlesOptions","particles","number","density","enable","size","random","move","direction","out_mode","line_linked","interactivity","events","onclick","mode","modes","remove","particles_nb","App","Components_Map","particles_default","className","params","Components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAOAA,IAAiBC,SAuDFC,8LAlDX,IAAIC,EAAQH,IAAe,WAAYI,KAGvCD,EAAME,QAAUC,IAGhBH,EAAMI,WAAa,IAAIH,IAAoBI,OAG3C,IAAIC,EAAcN,EAAMO,OAAOC,KAAK,IAAIP,KACxCK,EAAYG,QAAU,CAAC,MACvBH,EAAYI,YAAa,EAEzB,IAAIC,EAAkBL,EAAYM,YAAYC,SAC9CF,EAAgBG,YAAc,SAC9BH,EAAgBI,KAAOf,EAAMgB,OAAOC,SAAS,GAC7CN,EAAgBO,kBAAmB,EAG1BP,EAAgBQ,OAAOC,OAAO,SACpCC,WAAWN,KAAOlB,IAAc,WAGnC,IAAIyB,EAAYtB,EAAMO,OAAOC,KAAK,IAAIP,KACtCqB,EAAUpB,QAAUqB,IAEpB,IAAIC,EAAoBF,EAAUV,YAAYC,SAC9CW,EAAkBV,YAAc,SAChCU,EAAkBT,KAAOf,EAAMgB,OAAOC,SAAS,GAC/CO,EAAkBN,kBAAmB,EAG5BM,EAAmBL,OAAOC,OAAO,SACvCC,WAAWN,KAAOlB,IAAc,WAEnC4B,KAAKzB,MAAQA,iDAITyB,KAAKzB,OACPyB,KAAKzB,MAAM0B,2CAKb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WAAWC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,kBAjDvCC,wCC+CHC,6MArDXC,MAAQ,2EAEJ,OACIT,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACIC,MAAM,SACNC,SAAU,SAAAC,GAAW,OAAIC,QAAQC,IAAIF,IACrCG,MAAO,CAAC,cAAc,UAAU,UAAU,UAAU,SAAS,WAAW,wBAAwB,YAAY,UAAU,QAAQ,YAAY,UAAU,aAAa,UACxJ,UAAU,aAAa,WAAW,UAAU,UAAU,SAAS,QAAQ,UAAU,SAAS,UAAU,2BAA2B,WAAW,SAAS,yBACnJ,SAAS,WAAW,eAAe,UAAU,WAAW,WAAW,SAAS,aAAa,iBAAiB,OAAO,QAAQ,QAAQ,WAAW,QAAQ,eAAe,aACnK,gBAAgB,UAAU,cAAc,OAAO,SAAS,iBAAiB,UAAU,WAAW,WAAW,qBAAqB,UAAU,QAAQ,cAAc,oBAC9J,UAAU,WAAW,mBAAmB,gBAAgB,OAAO,UAAU,SAAS,mBAAmB,qBAAqB,QAAQ,SAAS,UAAU,UAAU,QAC/J,YAAY,SAAS,YAAY,UAAU,OAAO,YAAY,WAAW,SAAS,gBAAgB,SAAS,QAAQ,WAAW,YAAY,UAAU,UAAU,QAC9J,YAAY,OAAO,OAAO,UAAU,cAAc,SAAS,QAAQ,UAAU,QAAQ,SAAS,SAAS,aAAa,QAAQ,SAAS,kBAAkB,OAAO,SAC9J,UAAU,UAAU,UAAU,QAAQ,gBAAgB,YAAY,aAAa,QAAQ,YAAY,aAAa,SAAS,WAAW,WAAW,OAAO,QAAQ,aAC9J,YAAY,SAAS,UAAU,SAAS,WAAW,aAAa,aAAa,UAAU,aAAa,UAAU,QAAQ,cAAc,uBAAuB,gBAC3J,cAAc,YAAY,QAAQ,UAAU,SAAS,OAAO,WAAW,YAAY,SAAS,mBAAmB,WAAW,OAAO,cAAc,SAAS,WACxJ,cAAc,QAAQ,UAAU,UAAU,SAAS,SAAS,8BAA8B,QAAQ,aAAa,YAAY,eAAe,UAAU,SAAS,aAC7J,eAAe,YAAY,WAAW,WAAW,eAAe,cAAc,QAAQ,YAAY,uBAAuB,WAAW,aAAa,YAAY,QAC7J,WAAW,YAAY,SAAS,cAAc,QAAQ,SAAS,aAAa,WAAW,WAAW,eAAe,OAAO,QAAQ,wBAAwB,UACxJ,SAAS,eAAe,qBAAqB,SAAS,UAAU,uBAAuB,iBAAiB,gBAAgB,uCAAuC,UAC/J,aAAa,YAAY,UAAU,sBAAsB,QAAQ,SAAS,aAElF,SAAAC,GAAA,IACGC,EADHD,EACGC,IACAC,EAFHF,EAEGE,cAEAC,GAJHH,EAGGI,eAHHJ,EAIGG,QACAE,EALHL,EAKGK,WACAC,EANHN,EAMGM,SANHN,EAOGO,WAPH,OASGxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACAP,IAAKA,EACLQ,SAAUN,EACVO,QAAQ,QAER3B,EAAAC,EAAAC,cAAC0B,EAAA,EAADC,OAAAC,OAAA,CACIC,KAAK,IACLC,YAAY,SACZC,MAAOX,EACPY,QAASX,GACLJ,iBA3CXZ,+BCKf4B,EAAmB,CACvBC,UAAa,CACTC,OAAU,CACNJ,MAAS,IACTK,QAAW,CACPC,QAAU,IAGlBC,KAAQ,CACJP,MAAS,GACTQ,QAAU,GAEdC,KAAQ,CACJC,UAAa,SACbC,SAAY,OAEhBC,YAAe,CACXN,QAAU,IAGlBO,cAAiB,CACbC,OAAU,CACNC,QAAW,CACPT,QAAU,EACVU,KAAQ,WAGhBC,MAAS,CACLC,OAAU,CACNC,aAAgB,OAoBfC,mLAXX,OACErD,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAACoD,EAAD,MAEAtD,EAAAC,EAAAC,cAACqD,EAAAtD,EAAD,CAAWuD,UAAU,YAAYC,OAAQtB,IACzCnC,EAAAC,EAAAC,cAACwD,EAAD,cARUnD,aC/BEoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6e0108fd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\r\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\"\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\nclass Map extends Component {\r\n  \r\n    componentDidMount() {\r\n    let chart = am4core.create(\"chartdiv\", am4maps.MapChart);\r\n\r\n    // Set map definition\r\n    chart.geodata = am4geodata_worldLow;\r\n\r\n    // Set projection\r\n    chart.projection = new am4maps.projections.Miller();\r\n\r\n    // Series for World map\r\n    var worldSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    worldSeries.exclude = [\"AQ\"];\r\n    worldSeries.useGeodata = true;\r\n\r\n    var polygonTemplate = worldSeries.mapPolygons.template;\r\n    polygonTemplate.tooltipText = \"{name}\";\r\n    polygonTemplate.fill = chart.colors.getIndex(0);\r\n    polygonTemplate.nonScalingStroke = true;\r\n\r\n    // Hover state\r\n    var hs = polygonTemplate.states.create(\"hover\");\r\n    hs.properties.fill = am4core.color(\"#367B25\");\r\n\r\n    // Series for United States map\r\n    var usaSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    usaSeries.geodata = am4geodata_usaLow;\r\n\r\n    var usPolygonTemplate = usaSeries.mapPolygons.template;\r\n    usPolygonTemplate.tooltipText = \"{name}\";\r\n    usPolygonTemplate.fill = chart.colors.getIndex(1);\r\n    usPolygonTemplate.nonScalingStroke = true;\r\n\r\n    // Hover state\r\n    var hs = usPolygonTemplate .states.create(\"hover\");\r\n    hs.properties.fill = am4core.color(\"#367B25\");\r\n\r\n    this.chart = chart;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.chart) {\r\n      this.chart.dispose();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\r\n    );\r\n  }\r\n}\r\nexport default Map;\r\n","import React, { Component } from 'react';\r\nimport {Autocomplete,Button,TextInput,Pane} from 'evergreen-ui'\r\nclass Footer extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <Autocomplete\r\n                    title=\"Places\"\r\n                    onChange={changedItem => console.log(changedItem)}\r\n                    items={[\"Afghanistan\",\"Albania\",\"Algeria\",\"Andorra\",\"Angola\",\"Anguilla\",\"Antigua &amp; Barbuda\",\"Argentina\",\"Armenia\",\"Aruba\",\"Australia\",\"Austria\",\"Azerbaijan\",\"Bahamas\"\r\n                            ,\"Bahrain\",\"Bangladesh\",\"Barbados\",\"Belarus\",\"Belgium\",\"Belize\",\"Benin\",\"Bermuda\",\"Bhutan\",\"Bolivia\",\"Bosnia &amp; Herzegovina\",\"Botswana\",\"Brazil\",\"British Virgin Islands\"\r\n                            ,\"Brunei\",\"Bulgaria\",\"Burkina Faso\",\"Burundi\",\"Cambodia\",\"Cameroon\",\"Canada\",\"Cape Verde\",\"Cayman Islands\",\"Chad\",\"Chile\",\"China\",\"Colombia\",\"Congo\",\"Cook Islands\",\"Costa Rica\"\r\n                            ,\"Cote D Ivoire\",\"Croatia\",\"Cruise Ship\",\"Cuba\",\"Cyprus\",\"Czech Republic\",\"Denmark\",\"Djibouti\",\"Dominica\",\"Dominican Republic\",\"Ecuador\",\"Egypt\",\"El Salvador\",\"Equatorial Guinea\"\r\n                            ,\"Estonia\",\"Ethiopia\",\"Falkland Islands\",\"Faroe Islands\",\"Fiji\",\"Finland\",\"France\",\"French Polynesia\",\"French West Indies\",\"Gabon\",\"Gambia\",\"Georgia\",\"Germany\",\"Ghana\"\r\n                            ,\"Gibraltar\",\"Greece\",\"Greenland\",\"Grenada\",\"Guam\",\"Guatemala\",\"Guernsey\",\"Guinea\",\"Guinea Bissau\",\"Guyana\",\"Haiti\",\"Honduras\",\"Hong Kong\",\"Hungary\",\"Iceland\",\"India\"\r\n                            ,\"Indonesia\",\"Iran\",\"Iraq\",\"Ireland\",\"Isle of Man\",\"Israel\",\"Italy\",\"Jamaica\",\"Japan\",\"Jersey\",\"Jordan\",\"Kazakhstan\",\"Kenya\",\"Kuwait\",\"Kyrgyz Republic\",\"Laos\",\"Latvia\"\r\n                            ,\"Lebanon\",\"Lesotho\",\"Liberia\",\"Libya\",\"Liechtenstein\",\"Lithuania\",\"Luxembourg\",\"Macau\",\"Macedonia\",\"Madagascar\",\"Malawi\",\"Malaysia\",\"Maldives\",\"Mali\",\"Malta\",\"Mauritania\"\r\n                            ,\"Mauritius\",\"Mexico\",\"Moldova\",\"Monaco\",\"Mongolia\",\"Montenegro\",\"Montserrat\",\"Morocco\",\"Mozambique\",\"Namibia\",\"Nepal\",\"Netherlands\",\"Netherlands Antilles\",\"New Caledonia\"\r\n                            ,\"New Zealand\",\"Nicaragua\",\"Niger\",\"Nigeria\",\"Norway\",\"Oman\",\"Pakistan\",\"Palestine\",\"Panama\",\"Papua New Guinea\",\"Paraguay\",\"Peru\",\"Philippines\",\"Poland\",\"Portugal\"\r\n                            ,\"Puerto Rico\",\"Qatar\",\"Reunion\",\"Romania\",\"Russia\",\"Rwanda\",\"Saint Pierre &amp; Miquelon\",\"Samoa\",\"San Marino\",\"Satellite\",\"Saudi Arabia\",\"Senegal\",\"Serbia\",\"Seychelles\"\r\n                            ,\"Sierra Leone\",\"Singapore\",\"Slovakia\",\"Slovenia\",\"South Africa\",\"South Korea\",\"Spain\",\"Sri Lanka\",\"St Kitts &amp; Nevis\",\"St Lucia\",\"St Vincent\",\"St. Lucia\",\"Sudan\"\r\n                            ,\"Suriname\",\"Swaziland\",\"Sweden\",\"Switzerland\",\"Syria\",\"Taiwan\",\"Tajikistan\",\"Tanzania\",\"Thailand\",\"Timor L'Este\",\"Togo\",\"Tonga\",\"Trinidad &amp; Tobago\",\"Tunisia\"\r\n                            ,\"Turkey\",\"Turkmenistan\",\"Turks &amp; Caicos\",\"Uganda\",\"Ukraine\",\"United Arab Emirates\",\"United Kingdom\",\"United States\",\"United States Minor Outlying Islands\",\"Uruguay\"\r\n                            ,\"Uzbekistan\",\"Venezuela\",\"Vietnam\",\"Virgin Islands (US)\",\"Yemen\",\"Zambia\",\"Zimbabwe\"]}\r\n                    >\r\n                    {({\r\n                        key,\r\n                        getInputProps,\r\n                        getButtonProps,\r\n                        getRef,\r\n                        inputValue,\r\n                        openMenu,\r\n                        toggleMenu\r\n                    }) => (\r\n                        <Pane\r\n                        key={key}\r\n                        innerRef={getRef}\r\n                        display=\"flex\"\r\n                        >\r\n                        <TextInput\r\n                            flex=\"1\"\r\n                            placeholder=\"Places\"\r\n                            value={inputValue}\r\n                            onFocus={openMenu}\r\n                            {...getInputProps()}\r\n                        />\r\n                        \r\n                        </Pane>\r\n                    )}\r\n                </Autocomplete>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\nimport Map from './Components/Map'\nimport Footer from './Components/Footer'\nimport Particles from 'react-particles-js'\nimport {Pane } from 'evergreen-ui'\n\nconst particlesOptions = {\n  \"particles\": {\n      \"number\": {\n          \"value\": 160,\n          \"density\": {\n              \"enable\": false\n          }\n      },\n      \"size\": {\n          \"value\": 10,\n          \"random\": true\n      },\n      \"move\": {\n          \"direction\": \"bottom\",\n          \"out_mode\": \"out\"\n      },\n      \"line_linked\": {\n          \"enable\": false\n      }\n  },\n  \"interactivity\": {\n      \"events\": {\n          \"onclick\": {\n              \"enable\": true,\n              \"mode\": \"remove\"\n          }\n      },\n      \"modes\": {\n          \"remove\": {\n              \"particles_nb\": 10\n          }\n      }\n    }\n}\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        \n        <Map />\n        \n        <Particles className='particles' params={particlesOptions} />\n        <Footer />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}